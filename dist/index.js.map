{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar dtypes = require( '@stdlib/ndarray-dtypes' );\nvar gminBy = require( '@stdlib/stats-base-ndarray-min-by' );\nvar factory = require( '@stdlib/ndarray-base-unary-reduce-strided1d-dispatch-by-factory' );\n\n\n// VARIABLES //\n\nvar idtypes = dtypes(); // note: we allow any supported data type, as, in principle, a callback can transform any accessed element into a value having a desired data type\nvar odtypes = dtypes( 'real_and_generic' );\nvar policies = {\n\t'output': 'real_and_generic',\n\t'casting': 'none'\n};\nvar table = {\n\t'default': gminBy\n};\n\n\n// MAIN //\n\n/**\n* Computes the minimum value along one or more ndarray dimensions according to a callback function.\n*\n* @name minBy\n* @type {Function}\n* @param {ndarray} x - input ndarray\n* @param {Options} [options] - function options\n* @param {IntegerArray} [options.dims] - list of dimensions over which to perform a reduction\n* @param {boolean} [options.keepdims=false] - boolean indicating whether the reduced dimensions should be included in the returned ndarray as singleton dimensions\n* @param {string} [options.dtype] - output ndarray data type\n* @param {Function} clbk - callback function\n* @param {*} [thisArg] - callback function execution context\n* @throws {TypeError} first argument must be an ndarray-like object\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} callback argument must be a function\n* @throws {RangeError} dimension indices must not exceed input ndarray bounds\n* @throws {RangeError} number of dimension indices must not exceed the number of input ndarray dimensions\n* @throws {Error} must provide valid options\n* @returns {ndarray} output ndarray\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray = require( '@stdlib/ndarray-ctor' );\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 0.0, 2.0, 3.0, 0.0, 0.0, 6.0, 7.0, 0.0, 0.0, 10.0, 11.0, 0.0 ] );\n*\n* // Define the shape of the input array:\n* var sh = [ 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create an input ndarray:\n* var x = new ndarray( 'float64', xbuf, sh, sx, ox, 'row-major' );\n*\n* // Define an accessor function:\n* function clbk( value ) {\n*     return value * 2.0;\n* }\n*\n* // Perform reduction:\n* var out = minBy( x, clbk );\n* // returns <ndarray>\n*\n* var v = out.get();\n* // returns 4.0\n*/\nvar minBy = factory( table, [ idtypes ], odtypes, policies );\n\n\n// EXPORTS //\n\nmodule.exports = minBy;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the minimum value along one or more ndarray dimensions according to a callback function.\n*\n* @module @stdlib/stats-min-by\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var ndarray = require( '@stdlib/ndarray-ctor' );\n* var minBy = require( '@stdlib/stats-min-by' );\n*\n* // Create a data buffer:\n* var xbuf = new Float64Array( [ 0.0, 2.0, 3.0, 0.0, 0.0, 6.0, 7.0, 0.0, 0.0, 10.0, 11.0, 0.0 ] );\n*\n* // Define the shape of the input array:\n* var sh = [ 3, 1, 2 ];\n*\n* // Define the array strides:\n* var sx = [ 4, 4, 1 ];\n*\n* // Define the index offset:\n* var ox = 1;\n*\n* // Create an input ndarray:\n* var x = new ndarray( 'float64', xbuf, sh, sx, ox, 'row-major' );\n*\n* // Define an accessor function:\n* function clbk( value ) {\n*     return value * 2.0;\n* }\n*\n* // Perform reduction:\n* var out = minBy( x, clbk );\n* // returns <ndarray>\n*\n* var v = out.get();\n* // returns 4.0\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"assign\": \"main.assign\" }\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAS,QAAS,wBAAyB,EAC3CC,EAAS,QAAS,mCAAoC,EACtDC,EAAU,QAAS,iEAAkE,EAKrFC,EAAUH,EAAO,EACjBI,EAAUJ,EAAQ,kBAAmB,EACrCK,EAAW,CACd,OAAU,mBACV,QAAW,MACZ,EACIC,EAAQ,CACX,QAAWL,CACZ,EAwDIM,EAAQL,EAASI,EAAO,CAAEH,CAAQ,EAAGC,EAASC,CAAS,EAK3DN,EAAO,QAAUQ,ICtCjB,IAAIC,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "dtypes", "gminBy", "factory", "idtypes", "odtypes", "policies", "table", "minBy", "main"]
}
